fn (%input: Tensor[(1, 224, 224, 3), float32], %InceptionV1/Conv2d_1a_7x7/weights: Tensor[(7, 7, 3, 64), float32], %InceptionV1/InceptionV1/Conv2d_1a_7x7/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Conv2d_1a_7x7/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Conv2d_1a_7x7/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Conv2d_1a_7x7/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Conv2d_2b_1x1/weights: Tensor[(1, 1, 64, 64), float32], %InceptionV1/InceptionV1/Conv2d_2b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Conv2d_2b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Conv2d_2b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Conv2d_2b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Conv2d_2c_3x3/weights: Tensor[(3, 3, 64, 192), float32], %InceptionV1/InceptionV1/Conv2d_2c_3x3/BatchNorm/Const: Tensor[(192,), float32], %InceptionV1/Conv2d_2c_3x3/BatchNorm/beta: Tensor[(192,), float32], %InceptionV1/Conv2d_2c_3x3/BatchNorm/moving_mean: Tensor[(192,), float32], %InceptionV1/Conv2d_2c_3x3/BatchNorm/moving_variance: Tensor[(192,), float32], %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 192, 64), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 192, 96), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(96,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(96,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(96,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(96,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 96, 128), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 192, 16), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(16,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(16,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(16,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(16,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 16, 32), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 192, 32), float32], %InceptionV1/InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 256, 128), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 256, 128), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 128, 192), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(192,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(192,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(192,), float32], %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(192,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 256, 32), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 32, 96), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(96,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(96,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(96,), float32], %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(96,), float32], %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 256, 64), float32], %InceptionV1/InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 480, 192), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(192,), float32], %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(192,), float32], %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(192,), float32], %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(192,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 480, 96), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(96,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(96,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(96,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(96,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 96, 208), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(208,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(208,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(208,), float32], %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(208,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 480, 16), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(16,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(16,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(16,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(16,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 16, 48), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(48,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(48,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(48,), float32], %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(48,), float32], %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 480, 64), float32], %InceptionV1/InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 160), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(160,), float32], %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(160,), float32], %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(160,), float32], %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(160,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 112), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(112,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(112,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(112,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(112,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 112, 224), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(224,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(224,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(224,), float32], %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(224,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 24), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(24,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(24,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(24,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(24,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 24, 64), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 512, 64), float32], %InceptionV1/InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 128), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 128), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 128, 256), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(256,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(256,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(256,), float32], %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(256,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 24), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(24,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(24,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(24,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(24,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 24, 64), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 512, 64), float32], %InceptionV1/InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 112), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(112,), float32], %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(112,), float32], %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(112,), float32], %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(112,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 144), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(144,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(144,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(144,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(144,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 144, 288), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(288,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(288,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(288,), float32], %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(288,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 512, 32), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 32, 64), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 512, 64), float32], %InceptionV1/InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(64,), float32], %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(64,), float32], %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 528, 256), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(256,), float32], %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(256,), float32], %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(256,), float32], %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(256,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 528, 160), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(160,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(160,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(160,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(160,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 160, 320), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(320,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(320,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(320,), float32], %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(320,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 528, 32), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 32, 128), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 528, 128), float32], %InceptionV1/InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 256), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(256,), float32], %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(256,), float32], %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(256,), float32], %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(256,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 160), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(160,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(160,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(160,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(160,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 160, 320), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(320,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(320,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(320,), float32], %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(320,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 32), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(32,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(32,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(32,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(32,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/weights: Tensor[(3, 3, 32, 128), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 832, 128), float32], %InceptionV1/InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 384), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 192), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(192,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(192,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(192,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(192,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/weights: Tensor[(3, 3, 192, 384), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(384,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/weights: Tensor[(1, 1, 832, 48), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const: Tensor[(48,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta: Tensor[(48,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean: Tensor[(48,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance: Tensor[(48,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/weights: Tensor[(3, 3, 48, 128), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/weights: Tensor[(1, 1, 832, 128), float32], %InceptionV1/InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean: Tensor[(128,), float32], %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance: Tensor[(128,), float32], %InceptionV1/Logits/Conv2d_0c_1x1/weights: Tensor[(1, 1, 1024, 1001), float32], %InceptionV1/Logits/Conv2d_0c_1x1/biases: Tensor[(1001,), float32]) {
	  %0 = transpose(%input, axes=[0, 3, 1, 2])
	  %1 = nn.pad(%0, pad_width=[[0, 0], [0, 0], [2, 3], [2, 3]])
	  %2 = transpose(%InceptionV1/Conv2d_1a_7x7/weights, axes=[3, 2, 0, 1])
	  %3 = nn.conv2d(%1, %2, strides=[2, 2], channels=64, kernel_size=[7, 7])
	  %4 = transpose(%3, axes=[0, 2, 3, 1])
	  %5 = nn.batch_norm(%4, %InceptionV1/InceptionV1/Conv2d_1a_7x7/BatchNorm/Const, %InceptionV1/Conv2d_1a_7x7/BatchNorm/beta, %InceptionV1/Conv2d_1a_7x7/BatchNorm/moving_mean, %InceptionV1/Conv2d_1a_7x7/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %6 = %5.0
	  %7 = nn.relu(%6)
	  %8 = transpose(%7, axes=[0, 3, 1, 2])
	  %9 = nn.max_pool2d(%8, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 1, 1])
	  %10 = transpose(%9, axes=[0, 2, 3, 1])
	  %11 = transpose(%10, axes=[0, 3, 1, 2])
	  %12 = nn.pad(%11, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %13 = transpose(%InceptionV1/Conv2d_2b_1x1/weights, axes=[3, 2, 0, 1])
	  %14 = nn.conv2d(%12, %13, channels=64, kernel_size=[1, 1])
	  %15 = transpose(%14, axes=[0, 2, 3, 1])
	  %16 = nn.batch_norm(%15, %InceptionV1/InceptionV1/Conv2d_2b_1x1/BatchNorm/Const, %InceptionV1/Conv2d_2b_1x1/BatchNorm/beta, %InceptionV1/Conv2d_2b_1x1/BatchNorm/moving_mean, %InceptionV1/Conv2d_2b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %17 = %16.0
	  %18 = nn.relu(%17)
	  %19 = transpose(%18, axes=[0, 3, 1, 2])
	  %20 = nn.pad(%19, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %21 = transpose(%InceptionV1/Conv2d_2c_3x3/weights, axes=[3, 2, 0, 1])
	  %22 = nn.conv2d(%20, %21, channels=192, kernel_size=[3, 3])
	  %23 = transpose(%22, axes=[0, 2, 3, 1])
	  %24 = nn.batch_norm(%23, %InceptionV1/InceptionV1/Conv2d_2c_3x3/BatchNorm/Const, %InceptionV1/Conv2d_2c_3x3/BatchNorm/beta, %InceptionV1/Conv2d_2c_3x3/BatchNorm/moving_mean, %InceptionV1/Conv2d_2c_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %25 = %24.0
	  %26 = nn.relu(%25)
	  %27 = transpose(%26, axes=[0, 3, 1, 2])
	  %28 = nn.max_pool2d(%27, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 1, 1])
	  %29 = transpose(%28, axes=[0, 2, 3, 1])
	  %30 = transpose(%29, axes=[0, 3, 1, 2])
	  %31 = nn.pad(%30, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %32 = transpose(%InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %33 = nn.conv2d(%31, %32, channels=64, kernel_size=[1, 1])
	  %34 = transpose(%33, axes=[0, 2, 3, 1])
	  %35 = nn.batch_norm(%34, %InceptionV1/InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %36 = %35.0
	  %37 = nn.relu(%36)
	  %38 = transpose(%29, axes=[0, 3, 1, 2])
	  %39 = nn.pad(%38, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %40 = transpose(%InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %41 = nn.conv2d(%39, %40, channels=96, kernel_size=[1, 1])
	  %42 = transpose(%41, axes=[0, 2, 3, 1])
	  %43 = nn.batch_norm(%42, %InceptionV1/InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %44 = %43.0
	  %45 = nn.relu(%44)
	  %46 = transpose(%45, axes=[0, 3, 1, 2])
	  %47 = nn.pad(%46, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %48 = transpose(%InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %49 = nn.conv2d(%47, %48, channels=128, kernel_size=[3, 3])
	  %50 = transpose(%49, axes=[0, 2, 3, 1])
	  %51 = nn.batch_norm(%50, %InceptionV1/InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %52 = %51.0
	  %53 = nn.relu(%52)
	  %54 = transpose(%29, axes=[0, 3, 1, 2])
	  %55 = nn.pad(%54, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %56 = transpose(%InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %57 = nn.conv2d(%55, %56, channels=16, kernel_size=[1, 1])
	  %58 = transpose(%57, axes=[0, 2, 3, 1])
	  %59 = nn.batch_norm(%58, %InceptionV1/InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %60 = %59.0
	  %61 = nn.relu(%60)
	  %62 = transpose(%61, axes=[0, 3, 1, 2])
	  %63 = nn.pad(%62, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %64 = transpose(%InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %65 = nn.conv2d(%63, %64, channels=32, kernel_size=[3, 3])
	  %66 = transpose(%65, axes=[0, 2, 3, 1])
	  %67 = nn.batch_norm(%66, %InceptionV1/InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %68 = %67.0
	  %69 = nn.relu(%68)
	  %70 = transpose(%29, axes=[0, 3, 1, 2])
	  %71 = nn.max_pool2d(%70, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %72 = transpose(%71, axes=[0, 2, 3, 1])
	  %73 = transpose(%72, axes=[0, 3, 1, 2])
	  %74 = nn.pad(%73, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %75 = transpose(%InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %76 = nn.conv2d(%74, %75, channels=32, kernel_size=[1, 1])
	  %77 = transpose(%76, axes=[0, 2, 3, 1])
	  %78 = nn.batch_norm(%77, %InceptionV1/InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %79 = %78.0
	  %80 = nn.relu(%79)
	  %81 = (%37, %53, %69, %80)
	  %82 = concatenate(%81, axis=3)
	  %83 = transpose(%82, axes=[0, 3, 1, 2])
	  %84 = nn.pad(%83, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %85 = transpose(%InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %86 = nn.conv2d(%84, %85, channels=128, kernel_size=[1, 1])
	  %87 = transpose(%86, axes=[0, 2, 3, 1])
	  %88 = nn.batch_norm(%87, %InceptionV1/InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %89 = %88.0
	  %90 = nn.relu(%89)
	  %91 = transpose(%82, axes=[0, 3, 1, 2])
	  %92 = nn.pad(%91, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %93 = transpose(%InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %94 = nn.conv2d(%92, %93, channels=128, kernel_size=[1, 1])
	  %95 = transpose(%94, axes=[0, 2, 3, 1])
	  %96 = nn.batch_norm(%95, %InceptionV1/InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %97 = %96.0
	  %98 = nn.relu(%97)
	  %99 = transpose(%98, axes=[0, 3, 1, 2])
	  %100 = nn.pad(%99, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %101 = transpose(%InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %102 = nn.conv2d(%100, %101, channels=192, kernel_size=[3, 3])
	  %103 = transpose(%102, axes=[0, 2, 3, 1])
	  %104 = nn.batch_norm(%103, %InceptionV1/InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %105 = %104.0
	  %106 = nn.relu(%105)
	  %107 = transpose(%82, axes=[0, 3, 1, 2])
	  %108 = nn.pad(%107, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %109 = transpose(%InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %110 = nn.conv2d(%108, %109, channels=32, kernel_size=[1, 1])
	  %111 = transpose(%110, axes=[0, 2, 3, 1])
	  %112 = nn.batch_norm(%111, %InceptionV1/InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %113 = %112.0
	  %114 = nn.relu(%113)
	  %115 = transpose(%114, axes=[0, 3, 1, 2])
	  %116 = nn.pad(%115, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %117 = transpose(%InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %118 = nn.conv2d(%116, %117, channels=96, kernel_size=[3, 3])
	  %119 = transpose(%118, axes=[0, 2, 3, 1])
	  %120 = nn.batch_norm(%119, %InceptionV1/InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %121 = %120.0
	  %122 = nn.relu(%121)
	  %123 = transpose(%82, axes=[0, 3, 1, 2])
	  %124 = nn.max_pool2d(%123, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %125 = transpose(%124, axes=[0, 2, 3, 1])
	  %126 = transpose(%125, axes=[0, 3, 1, 2])
	  %127 = nn.pad(%126, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %128 = transpose(%InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %129 = nn.conv2d(%127, %128, channels=64, kernel_size=[1, 1])
	  %130 = transpose(%129, axes=[0, 2, 3, 1])
	  %131 = nn.batch_norm(%130, %InceptionV1/InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_3c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %132 = %131.0
	  %133 = nn.relu(%132)
	  %134 = (%90, %106, %122, %133)
	  %135 = concatenate(%134, axis=3)
	  %136 = transpose(%135, axes=[0, 3, 1, 2])
	  %137 = nn.max_pool2d(%136, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 1, 1])
	  %138 = transpose(%137, axes=[0, 2, 3, 1])
	  %139 = transpose(%138, axes=[0, 3, 1, 2])
	  %140 = nn.pad(%139, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %141 = transpose(%InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %142 = nn.conv2d(%140, %141, channels=192, kernel_size=[1, 1])
	  %143 = transpose(%142, axes=[0, 2, 3, 1])
	  %144 = nn.batch_norm(%143, %InceptionV1/InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %145 = %144.0
	  %146 = nn.relu(%145)
	  %147 = transpose(%138, axes=[0, 3, 1, 2])
	  %148 = nn.pad(%147, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %149 = transpose(%InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %150 = nn.conv2d(%148, %149, channels=96, kernel_size=[1, 1])
	  %151 = transpose(%150, axes=[0, 2, 3, 1])
	  %152 = nn.batch_norm(%151, %InceptionV1/InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %153 = %152.0
	  %154 = nn.relu(%153)
	  %155 = transpose(%154, axes=[0, 3, 1, 2])
	  %156 = nn.pad(%155, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %157 = transpose(%InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %158 = nn.conv2d(%156, %157, channels=208, kernel_size=[3, 3])
	  %159 = transpose(%158, axes=[0, 2, 3, 1])
	  %160 = nn.batch_norm(%159, %InceptionV1/InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %161 = %160.0
	  %162 = nn.relu(%161)
	  %163 = transpose(%138, axes=[0, 3, 1, 2])
	  %164 = nn.pad(%163, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %165 = transpose(%InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %166 = nn.conv2d(%164, %165, channels=16, kernel_size=[1, 1])
	  %167 = transpose(%166, axes=[0, 2, 3, 1])
	  %168 = nn.batch_norm(%167, %InceptionV1/InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %169 = %168.0
	  %170 = nn.relu(%169)
	  %171 = transpose(%170, axes=[0, 3, 1, 2])
	  %172 = nn.pad(%171, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %173 = transpose(%InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %174 = nn.conv2d(%172, %173, channels=48, kernel_size=[3, 3])
	  %175 = transpose(%174, axes=[0, 2, 3, 1])
	  %176 = nn.batch_norm(%175, %InceptionV1/InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %177 = %176.0
	  %178 = nn.relu(%177)
	  %179 = transpose(%138, axes=[0, 3, 1, 2])
	  %180 = nn.max_pool2d(%179, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %181 = transpose(%180, axes=[0, 2, 3, 1])
	  %182 = transpose(%181, axes=[0, 3, 1, 2])
	  %183 = nn.pad(%182, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %184 = transpose(%InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %185 = nn.conv2d(%183, %184, channels=64, kernel_size=[1, 1])
	  %186 = transpose(%185, axes=[0, 2, 3, 1])
	  %187 = nn.batch_norm(%186, %InceptionV1/InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %188 = %187.0
	  %189 = nn.relu(%188)
	  %190 = (%146, %162, %178, %189)
	  %191 = concatenate(%190, axis=3)
	  %192 = transpose(%191, axes=[0, 3, 1, 2])
	  %193 = nn.pad(%192, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %194 = transpose(%InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %195 = nn.conv2d(%193, %194, channels=160, kernel_size=[1, 1])
	  %196 = transpose(%195, axes=[0, 2, 3, 1])
	  %197 = nn.batch_norm(%196, %InceptionV1/InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %198 = %197.0
	  %199 = nn.relu(%198)
	  %200 = transpose(%191, axes=[0, 3, 1, 2])
	  %201 = nn.pad(%200, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %202 = transpose(%InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %203 = nn.conv2d(%201, %202, channels=112, kernel_size=[1, 1])
	  %204 = transpose(%203, axes=[0, 2, 3, 1])
	  %205 = nn.batch_norm(%204, %InceptionV1/InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %206 = %205.0
	  %207 = nn.relu(%206)
	  %208 = transpose(%207, axes=[0, 3, 1, 2])
	  %209 = nn.pad(%208, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %210 = transpose(%InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %211 = nn.conv2d(%209, %210, channels=224, kernel_size=[3, 3])
	  %212 = transpose(%211, axes=[0, 2, 3, 1])
	  %213 = nn.batch_norm(%212, %InceptionV1/InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %214 = %213.0
	  %215 = nn.relu(%214)
	  %216 = transpose(%191, axes=[0, 3, 1, 2])
	  %217 = nn.pad(%216, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %218 = transpose(%InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %219 = nn.conv2d(%217, %218, channels=24, kernel_size=[1, 1])
	  %220 = transpose(%219, axes=[0, 2, 3, 1])
	  %221 = nn.batch_norm(%220, %InceptionV1/InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %222 = %221.0
	  %223 = nn.relu(%222)
	  %224 = transpose(%223, axes=[0, 3, 1, 2])
	  %225 = nn.pad(%224, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %226 = transpose(%InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %227 = nn.conv2d(%225, %226, channels=64, kernel_size=[3, 3])
	  %228 = transpose(%227, axes=[0, 2, 3, 1])
	  %229 = nn.batch_norm(%228, %InceptionV1/InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %230 = %229.0
	  %231 = nn.relu(%230)
	  %232 = transpose(%191, axes=[0, 3, 1, 2])
	  %233 = nn.max_pool2d(%232, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %234 = transpose(%233, axes=[0, 2, 3, 1])
	  %235 = transpose(%234, axes=[0, 3, 1, 2])
	  %236 = nn.pad(%235, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %237 = transpose(%InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %238 = nn.conv2d(%236, %237, channels=64, kernel_size=[1, 1])
	  %239 = transpose(%238, axes=[0, 2, 3, 1])
	  %240 = nn.batch_norm(%239, %InceptionV1/InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %241 = %240.0
	  %242 = nn.relu(%241)
	  %243 = (%199, %215, %231, %242)
	  %244 = concatenate(%243, axis=3)
	  %245 = transpose(%244, axes=[0, 3, 1, 2])
	  %246 = nn.pad(%245, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %247 = transpose(%InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %248 = nn.conv2d(%246, %247, channels=128, kernel_size=[1, 1])
	  %249 = transpose(%248, axes=[0, 2, 3, 1])
	  %250 = nn.batch_norm(%249, %InceptionV1/InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %251 = %250.0
	  %252 = nn.relu(%251)
	  %253 = transpose(%244, axes=[0, 3, 1, 2])
	  %254 = nn.pad(%253, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %255 = transpose(%InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %256 = nn.conv2d(%254, %255, channels=128, kernel_size=[1, 1])
	  %257 = transpose(%256, axes=[0, 2, 3, 1])
	  %258 = nn.batch_norm(%257, %InceptionV1/InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %259 = %258.0
	  %260 = nn.relu(%259)
	  %261 = transpose(%260, axes=[0, 3, 1, 2])
	  %262 = nn.pad(%261, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %263 = transpose(%InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %264 = nn.conv2d(%262, %263, channels=256, kernel_size=[3, 3])
	  %265 = transpose(%264, axes=[0, 2, 3, 1])
	  %266 = nn.batch_norm(%265, %InceptionV1/InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %267 = %266.0
	  %268 = nn.relu(%267)
	  %269 = transpose(%244, axes=[0, 3, 1, 2])
	  %270 = nn.pad(%269, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %271 = transpose(%InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %272 = nn.conv2d(%270, %271, channels=24, kernel_size=[1, 1])
	  %273 = transpose(%272, axes=[0, 2, 3, 1])
	  %274 = nn.batch_norm(%273, %InceptionV1/InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %275 = %274.0
	  %276 = nn.relu(%275)
	  %277 = transpose(%276, axes=[0, 3, 1, 2])
	  %278 = nn.pad(%277, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %279 = transpose(%InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %280 = nn.conv2d(%278, %279, channels=64, kernel_size=[3, 3])
	  %281 = transpose(%280, axes=[0, 2, 3, 1])
	  %282 = nn.batch_norm(%281, %InceptionV1/InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %283 = %282.0
	  %284 = nn.relu(%283)
	  %285 = transpose(%244, axes=[0, 3, 1, 2])
	  %286 = nn.max_pool2d(%285, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %287 = transpose(%286, axes=[0, 2, 3, 1])
	  %288 = transpose(%287, axes=[0, 3, 1, 2])
	  %289 = nn.pad(%288, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %290 = transpose(%InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %291 = nn.conv2d(%289, %290, channels=64, kernel_size=[1, 1])
	  %292 = transpose(%291, axes=[0, 2, 3, 1])
	  %293 = nn.batch_norm(%292, %InceptionV1/InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4d/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %294 = %293.0
	  %295 = nn.relu(%294)
	  %296 = (%252, %268, %284, %295)
	  %297 = concatenate(%296, axis=3)
	  %298 = transpose(%297, axes=[0, 3, 1, 2])
	  %299 = nn.pad(%298, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %300 = transpose(%InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %301 = nn.conv2d(%299, %300, channels=112, kernel_size=[1, 1])
	  %302 = transpose(%301, axes=[0, 2, 3, 1])
	  %303 = nn.batch_norm(%302, %InceptionV1/InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %304 = %303.0
	  %305 = nn.relu(%304)
	  %306 = transpose(%297, axes=[0, 3, 1, 2])
	  %307 = nn.pad(%306, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %308 = transpose(%InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %309 = nn.conv2d(%307, %308, channels=144, kernel_size=[1, 1])
	  %310 = transpose(%309, axes=[0, 2, 3, 1])
	  %311 = nn.batch_norm(%310, %InceptionV1/InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %312 = %311.0
	  %313 = nn.relu(%312)
	  %314 = transpose(%313, axes=[0, 3, 1, 2])
	  %315 = nn.pad(%314, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %316 = transpose(%InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %317 = nn.conv2d(%315, %316, channels=288, kernel_size=[3, 3])
	  %318 = transpose(%317, axes=[0, 2, 3, 1])
	  %319 = nn.batch_norm(%318, %InceptionV1/InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %320 = %319.0
	  %321 = nn.relu(%320)
	  %322 = transpose(%297, axes=[0, 3, 1, 2])
	  %323 = nn.pad(%322, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %324 = transpose(%InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %325 = nn.conv2d(%323, %324, channels=32, kernel_size=[1, 1])
	  %326 = transpose(%325, axes=[0, 2, 3, 1])
	  %327 = nn.batch_norm(%326, %InceptionV1/InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %328 = %327.0
	  %329 = nn.relu(%328)
	  %330 = transpose(%329, axes=[0, 3, 1, 2])
	  %331 = nn.pad(%330, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %332 = transpose(%InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %333 = nn.conv2d(%331, %332, channels=64, kernel_size=[3, 3])
	  %334 = transpose(%333, axes=[0, 2, 3, 1])
	  %335 = nn.batch_norm(%334, %InceptionV1/InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %336 = %335.0
	  %337 = nn.relu(%336)
	  %338 = transpose(%297, axes=[0, 3, 1, 2])
	  %339 = nn.max_pool2d(%338, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %340 = transpose(%339, axes=[0, 2, 3, 1])
	  %341 = transpose(%340, axes=[0, 3, 1, 2])
	  %342 = nn.pad(%341, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %343 = transpose(%InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %344 = nn.conv2d(%342, %343, channels=64, kernel_size=[1, 1])
	  %345 = transpose(%344, axes=[0, 2, 3, 1])
	  %346 = nn.batch_norm(%345, %InceptionV1/InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4e/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %347 = %346.0
	  %348 = nn.relu(%347)
	  %349 = (%305, %321, %337, %348)
	  %350 = concatenate(%349, axis=3)
	  %351 = transpose(%350, axes=[0, 3, 1, 2])
	  %352 = nn.pad(%351, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %353 = transpose(%InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %354 = nn.conv2d(%352, %353, channels=256, kernel_size=[1, 1])
	  %355 = transpose(%354, axes=[0, 2, 3, 1])
	  %356 = nn.batch_norm(%355, %InceptionV1/InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %357 = %356.0
	  %358 = nn.relu(%357)
	  %359 = transpose(%350, axes=[0, 3, 1, 2])
	  %360 = nn.pad(%359, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %361 = transpose(%InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %362 = nn.conv2d(%360, %361, channels=160, kernel_size=[1, 1])
	  %363 = transpose(%362, axes=[0, 2, 3, 1])
	  %364 = nn.batch_norm(%363, %InceptionV1/InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %365 = %364.0
	  %366 = nn.relu(%365)
	  %367 = transpose(%366, axes=[0, 3, 1, 2])
	  %368 = nn.pad(%367, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %369 = transpose(%InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %370 = nn.conv2d(%368, %369, channels=320, kernel_size=[3, 3])
	  %371 = transpose(%370, axes=[0, 2, 3, 1])
	  %372 = nn.batch_norm(%371, %InceptionV1/InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %373 = %372.0
	  %374 = nn.relu(%373)
	  %375 = transpose(%350, axes=[0, 3, 1, 2])
	  %376 = nn.pad(%375, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %377 = transpose(%InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %378 = nn.conv2d(%376, %377, channels=32, kernel_size=[1, 1])
	  %379 = transpose(%378, axes=[0, 2, 3, 1])
	  %380 = nn.batch_norm(%379, %InceptionV1/InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %381 = %380.0
	  %382 = nn.relu(%381)
	  %383 = transpose(%382, axes=[0, 3, 1, 2])
	  %384 = nn.pad(%383, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %385 = transpose(%InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %386 = nn.conv2d(%384, %385, channels=128, kernel_size=[3, 3])
	  %387 = transpose(%386, axes=[0, 2, 3, 1])
	  %388 = nn.batch_norm(%387, %InceptionV1/InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %389 = %388.0
	  %390 = nn.relu(%389)
	  %391 = transpose(%350, axes=[0, 3, 1, 2])
	  %392 = nn.max_pool2d(%391, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %393 = transpose(%392, axes=[0, 2, 3, 1])
	  %394 = transpose(%393, axes=[0, 3, 1, 2])
	  %395 = nn.pad(%394, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %396 = transpose(%InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %397 = nn.conv2d(%395, %396, channels=128, kernel_size=[1, 1])
	  %398 = transpose(%397, axes=[0, 2, 3, 1])
	  %399 = nn.batch_norm(%398, %InceptionV1/InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_4f/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %400 = %399.0
	  %401 = nn.relu(%400)
	  %402 = (%358, %374, %390, %401)
	  %403 = concatenate(%402, axis=3)
	  %404 = transpose(%403, axes=[0, 3, 1, 2])
	  %405 = nn.max_pool2d(%404, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
	  %406 = transpose(%405, axes=[0, 2, 3, 1])
	  %407 = transpose(%406, axes=[0, 3, 1, 2])
	  %408 = nn.pad(%407, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %409 = transpose(%InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %410 = nn.conv2d(%408, %409, channels=256, kernel_size=[1, 1])
	  %411 = transpose(%410, axes=[0, 2, 3, 1])
	  %412 = nn.batch_norm(%411, %InceptionV1/InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %413 = %412.0
	  %414 = nn.relu(%413)
	  %415 = transpose(%406, axes=[0, 3, 1, 2])
	  %416 = nn.pad(%415, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %417 = transpose(%InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %418 = nn.conv2d(%416, %417, channels=160, kernel_size=[1, 1])
	  %419 = transpose(%418, axes=[0, 2, 3, 1])
	  %420 = nn.batch_norm(%419, %InceptionV1/InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %421 = %420.0
	  %422 = nn.relu(%421)
	  %423 = transpose(%422, axes=[0, 3, 1, 2])
	  %424 = nn.pad(%423, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %425 = transpose(%InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %426 = nn.conv2d(%424, %425, channels=320, kernel_size=[3, 3])
	  %427 = transpose(%426, axes=[0, 2, 3, 1])
	  %428 = nn.batch_norm(%427, %InceptionV1/InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %429 = %428.0
	  %430 = nn.relu(%429)
	  %431 = transpose(%406, axes=[0, 3, 1, 2])
	  %432 = nn.pad(%431, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %433 = transpose(%InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %434 = nn.conv2d(%432, %433, channels=32, kernel_size=[1, 1])
	  %435 = transpose(%434, axes=[0, 2, 3, 1])
	  %436 = nn.batch_norm(%435, %InceptionV1/InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %437 = %436.0
	  %438 = nn.relu(%437)
	  %439 = transpose(%438, axes=[0, 3, 1, 2])
	  %440 = nn.pad(%439, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %441 = transpose(%InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/weights, axes=[3, 2, 0, 1])
	  %442 = nn.conv2d(%440, %441, channels=128, kernel_size=[3, 3])
	  %443 = transpose(%442, axes=[0, 2, 3, 1])
	  %444 = nn.batch_norm(%443, %InceptionV1/InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_2/Conv2d_0a_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %445 = %444.0
	  %446 = nn.relu(%445)
	  %447 = transpose(%406, axes=[0, 3, 1, 2])
	  %448 = nn.max_pool2d(%447, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %449 = transpose(%448, axes=[0, 2, 3, 1])
	  %450 = transpose(%449, axes=[0, 3, 1, 2])
	  %451 = nn.pad(%450, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %452 = transpose(%InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %453 = nn.conv2d(%451, %452, channels=128, kernel_size=[1, 1])
	  %454 = transpose(%453, axes=[0, 2, 3, 1])
	  %455 = nn.batch_norm(%454, %InceptionV1/InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5b/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %456 = %455.0
	  %457 = nn.relu(%456)
	  %458 = (%414, %430, %446, %457)
	  %459 = concatenate(%458, axis=3)
	  %460 = transpose(%459, axes=[0, 3, 1, 2])
	  %461 = nn.pad(%460, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %462 = transpose(%InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %463 = nn.conv2d(%461, %462, channels=384, kernel_size=[1, 1])
	  %464 = transpose(%463, axes=[0, 2, 3, 1])
	  %465 = nn.batch_norm(%464, %InceptionV1/InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_0/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %466 = %465.0
	  %467 = nn.relu(%466)
	  %468 = transpose(%459, axes=[0, 3, 1, 2])
	  %469 = nn.pad(%468, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %470 = transpose(%InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %471 = nn.conv2d(%469, %470, channels=192, kernel_size=[1, 1])
	  %472 = transpose(%471, axes=[0, 2, 3, 1])
	  %473 = nn.batch_norm(%472, %InceptionV1/InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %474 = %473.0
	  %475 = nn.relu(%474)
	  %476 = transpose(%475, axes=[0, 3, 1, 2])
	  %477 = nn.pad(%476, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %478 = transpose(%InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %479 = nn.conv2d(%477, %478, channels=384, kernel_size=[3, 3])
	  %480 = transpose(%479, axes=[0, 2, 3, 1])
	  %481 = nn.batch_norm(%480, %InceptionV1/InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_1/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %482 = %481.0
	  %483 = nn.relu(%482)
	  %484 = transpose(%459, axes=[0, 3, 1, 2])
	  %485 = nn.pad(%484, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %486 = transpose(%InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/weights, axes=[3, 2, 0, 1])
	  %487 = nn.conv2d(%485, %486, channels=48, kernel_size=[1, 1])
	  %488 = transpose(%487, axes=[0, 2, 3, 1])
	  %489 = nn.batch_norm(%488, %InceptionV1/InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0a_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %490 = %489.0
	  %491 = nn.relu(%490)
	  %492 = transpose(%491, axes=[0, 3, 1, 2])
	  %493 = nn.pad(%492, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]])
	  %494 = transpose(%InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/weights, axes=[3, 2, 0, 1])
	  %495 = nn.conv2d(%493, %494, channels=128, kernel_size=[3, 3])
	  %496 = transpose(%495, axes=[0, 2, 3, 1])
	  %497 = nn.batch_norm(%496, %InceptionV1/InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_2/Conv2d_0b_3x3/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %498 = %497.0
	  %499 = nn.relu(%498)
	  %500 = transpose(%459, axes=[0, 3, 1, 2])
	  %501 = nn.max_pool2d(%500, pool_size=[3, 3], padding=[1, 1, 1, 1])
	  %502 = transpose(%501, axes=[0, 2, 3, 1])
	  %503 = transpose(%502, axes=[0, 3, 1, 2])
	  %504 = nn.pad(%503, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %505 = transpose(%InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/weights, axes=[3, 2, 0, 1])
	  %506 = nn.conv2d(%504, %505, channels=128, kernel_size=[1, 1])
	  %507 = transpose(%506, axes=[0, 2, 3, 1])
	  %508 = nn.batch_norm(%507, %InceptionV1/InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/Const, %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/beta, %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_mean, %InceptionV1/Mixed_5c/Branch_3/Conv2d_0b_1x1/BatchNorm/moving_variance, axis=3, epsilon=0.001)
	  %509 = %508.0
	  %510 = nn.relu(%509)
	  %511 = (%467, %483, %499, %510)
	  %512 = concatenate(%511, axis=3)
	  %513 = transpose(%512, axes=[0, 3, 1, 2])
	  %514 = nn.avg_pool2d(%513, pool_size=[7, 7])
	  %515 = transpose(%514, axes=[0, 2, 3, 1])
	  %516 = transpose(%515, axes=[0, 3, 1, 2])
	  %517 = nn.pad(%516, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]])
	  %518 = transpose(%InceptionV1/Logits/Conv2d_0c_1x1/weights, axes=[3, 2, 0, 1])
	  %519 = nn.conv2d(%517, %518, channels=1001, kernel_size=[1, 1])
	  %520 = transpose(%519, axes=[0, 2, 3, 1])
	  %521 = add(%520, %InceptionV1/Logits/Conv2d_0c_1x1/biases)
	  %522 = squeeze(%521, axis=[1, 2])
	  %523 = reshape(%522, newshape=[-1, 1001])
	  %524 = nn.softmax(%523)
	  reshape(%524, newshape=[1, 1001])
}
